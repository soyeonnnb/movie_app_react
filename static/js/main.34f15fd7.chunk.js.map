{"version":3,"sources":["routes/About.js","components/Movie.js","routes/Home.js","routes/Detail.js","components/Navigations.js","App.js","index.js"],"names":["About","className","Movie","id","year","title","summary","poster","genres","rating","runtime","to","pathname","state","src","alt","map","genre","index","slice","Home","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","Detail","props","location","history","undefined","push","Navigation","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34f15fd7.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction About() {\n  return (\n    <section className=\"detail_container\">\n      <p className=\"detail__p\">\n        React를 이용한 Movie APP 만들기\n        <br />\n        Nomad Coders에서 가져온 YTS REST API 사용\n      </p>\n    </section>\n  );\n}\n\nexport default About;\n","import { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport \"./Movie.css\";\n\nfunction Movie({ id, year, title, summary, poster, genres, rating, runtime }) {\n  return (\n    <div className=\"movie\">\n      <Link\n        to={{\n          pathname: `/movie/${id}`,\n          state: {\n            year,\n            title,\n            summary,\n            poster,\n            genres,\n            rating,\n            runtime,\n          },\n        }}\n      >\n        <img src={poster} className=\"movie__img\" alt={title} title={title} />\n        <div className=\"moive__data\">\n          <h3 className=\"movie__title\">{title}</h3>\n          <h5 className=\"movie__year\">{year}</h5>\n          <ul className=\"genres\">\n            {genres.map(\n              (\n                genre,\n                index //map은 또다른 argument를 줌(하나는 현재 item, 하나는 item number -> 원하는 걸로 하기)\n              ) => (\n                <li key={index} className=\"genres_genre\">\n                  {genre}\n                </li>\n              )\n            )}\n          </ul>\n          <p className=\"movie_summary\">{summary.slice(0, 150)} ...</p>{\" \"}\n          {/* slice를 사용해서 긴 문장 자르기 .slice(시작점, 끝점) */}\n        </div>\n      </Link>\n    </div>\n  );\n}\n\nMovie.propTypes = {\n  id: PropTypes.number.isRequired,\n  year: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  summary: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired, // array는 이렇게 생성\n  rating: PropTypes.number.isRequired,\n  runtime: PropTypes.number.isRequired,\n};\n\nexport default Movie;\n","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"../components/Movie\";\nimport \"./Home.css\";\n\nclass Home extends React.Component {\n  state = {\n    isLoading: true,\n    movies: [],\n  };\n  getMovies = async () => {\n    // 기다렸다가 작업이 끝난 뒤에 해야 하기 때문에 async 사용\n    const {\n      data: {\n        data: { movies },\n      },\n    } = await axios.get(\n      // 기다려야 하는 곳에 await 넣기\n      \"https://yts-proxy.nomadcoders1.now.sh/list_movies.json?sort_by=rating\"\n    );\n    this.setState({ movies, isLoading: false });\n  };\n  // rendering이 성공적으로 실행되면 이 함수가 실행됨.\n  componentDidMount() {\n    this.getMovies();\n  }\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      // HTML 코드 작성\n      // 이건 어쨌든 jsx이기 때문에(not HTML) class 대신 className사용해야함.\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map((movie) => (\n              // map 함수 : 배열 내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 모아 새로운 배열 반환\n              // Movie에 인자 넘겨주기\n              <Movie\n                key={movie.id}\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n                rating={movie.rating}\n                runtime={movie.runtime}\n              />\n            ))}\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default Home;\n","import React from \"react\";\nimport \"./Detail.css\";\n\n/* 그냥 /movie-detail로 가면 아무것도 가져오지 않음 \n-> 이걸 처리해야함 -> 그래서 class 사용*/\n\nclass Detail extends React.Component {\n  componentDidMount() {\n    const { location, history } = this.props; // this.props에서 location은 가져옴\n    /* 만약 state에 아무것도 없다면 -> home으로 redirect\n    여기서 history(여기엔 go, goBack, goForward등 다양함 url관련 함수 존재) 사용 */\n\n    if (location.state === undefined) {\n      history.push(\"/\");\n    }\n  }\n  render() {\n    const { state } = this.props.location; // 이걸 해주면 새로고침 하면 에러발생(render하고 componentDidMount실행하기 때문)\n    //solution\n    if (state) {\n      return (\n        <section className=\"detail_container\">\n          <img\n            src={state.poster}\n            className=\"detail__img\"\n            alt={state.title}\n            title={state.title}\n          />\n          <div className=\"detail__box\">\n            <div className=\"detail__title\">TITLE | {state.title}</div>\n            <div className=\"detail__year\">YEAR | {state.year}</div>\n            <ul className=\"detail__genres\">\n              GENRE |\n              {state.genres.map((genre, index) => (\n                <li key={index} className=\"detail__genre\">\n                  {genre}\n                </li>\n              ))}\n            </ul>\n            <div className=\"detail__rating\">RATING | {state.rating}/10</div>\n            <div className=\"detail__runtime\">RUNTIME | {state.runtime}분</div>\n            <div className=\"detail__summary\">SUMMARY | {state.summary}</div>\n          </div>\n        </section>\n      );\n    } else {\n      return null;\n    }\n  }\n}\nexport default Detail;\n","import { Link } from \"react-router-dom\";\nimport \"./Navigation.css\";\n\nfunction Navigation() {\n  return (\n    <div className=\"navigation\">\n      {/* html의 a href 쓰면 사이트가 강제로 새로고침 되기 때문에 이걸 \n        사용하지 않고 Link to를 사용함 */}\n      <Link to=\"/\" className=\"navigation__link\">\n        Home\n      </Link>\n      <Link to=\"/about\" className=\"navigation__link\">\n        About\n      </Link>\n    </div>\n  );\n}\nexport default Navigation;\n","import { HashRouter, Route } from \"react-router-dom\"; // 여러 종류의 router들이 있음\n/* router -> url 을 보고 js 실행\n  예를 들면 url이 /로 끝나면 Home.js를 실행한다거나 \n      /about 으로 끝나면 About.js를 실행한다거나 해줌\n*/\nimport About from \"./routes/About\";\nimport Home from \"./routes/Home\";\nimport Detail from \"./routes/Detail\";\nimport Navigation from \"./components/Navigations\";\n\nfunction App() {\n  return (\n    // BrowerRouter는 url에 /#/가 없지만 gh-pages를 설정할 때에 편리하게 하기 위해 HashRouter사용\n    <HashRouter>\n      {/* Navigations 만들기 Router밖에서는 \n        Navigation(Link를 사용하기 때문에)이 작동하지 않음 */}\n      <Navigation />\n      <Route path=\"/\" exact={true} component={Home} />{\" \"}\n      {/* exact => 정확히(exact) \"/\"\" 인 url만 render */}\n      {/* Route내에는 렌더링할 스크린과 뭘 할지 정해주는 props가 들어감 */}\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/movie/:id\" component={Detail} />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}